I want to write a matrix library
First, I wanted to compare fork and threads performances in matrix multiplications

I need a matrix class
    * A vector of vectors vector<vector<float>>
    * A multiplication function that uses threads
    * A multiplication function that uses fork


Expected result : threads are quicker than fork

Fork duplicates all the process while thread does not


RAII (Resource acquisition is initialization): 
    . How do I supposed to implement this ? 
        => In the constructor, declare a shared memory space with mmap, in which I'll
            put the matrix data (vector of vectors). Actually, all the vectors must be 
            in a shared memory space. 
        => In the destructor, I'll free all the ressources (unmap the shared memory space)
    


Treatment : 
    Use a lambda expression to treat the result of the multiplication (catches the reference to a result)
    Create a worker class which makes all the process of    
        Generating the matrixes
        Calculating the result
        Redirects the result into a file



Check how many processes are running :
    ps -eo nlwp | tail -n +2 | awk '{ num_threads += $1 } END { print num_threads }'

max number of threads : 
    cat /proc/sys/kernel/threads-max
        The result in ubuntu : 125749



Finally, the article will talk about matrix multiplication benchmarks, threads - forks